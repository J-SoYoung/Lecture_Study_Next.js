import type { Metadata } from "next";
import { PrismaClient, PRICE } from "@prisma/client";

import SearchHeader from "./components/SearchHeader";
import SearchSideBar from "./components/SearchSideBar";
import SearchRestaurantCard from "./components/SearchRestaurantCard";

export const metadata: Metadata = {
  title: "Search Open table",
  description: "Generated by create next app",
  icons: {
    icon: "/icons/search.ico",
  },
};

interface SearchParams {
  city?: string, 
  cuisine?: string, 
  price?: PRICE
}

const prisma = new PrismaClient();

const fetchRestaurantByCity = (searchParams:SearchParams) => {
  
  const where: any = {}
  if (searchParams.city){
    const location = {
      name:{
        equals: searchParams.city.toLowerCase()
      }
    }
    where.location = location
  }
  if (searchParams.cuisine){
    const cuisine = {
      name:{
        equals: searchParams.cuisine.toLowerCase()
      }
    }
    where.cuisine = cuisine
  }
  if (searchParams.price){
    const price = {
      equals: searchParams.price
    }
    where.price = price
  }
  
  const select = {
    id: true,
    name: true,
    main_image: true,
    price: true,
    cuisine: true,
    location: true,
    slug: true,
    reviews: true
  };
  return prisma.restaurant.findMany({
    where,
    select
  });
};

const fetchLocations = async() => {
  return prisma.location.findMany()
}
const fetchCuisines = async() => {
  return prisma.cuisine.findMany()

}

export default async function Search({searchParams}:{searchParams:SearchParams}) {
  const restaurants = await fetchRestaurantByCity(searchParams);
  const locations = await fetchLocations()
  const cuisines = await fetchCuisines()

  return (
    <>
      <SearchHeader />
      <div className="flex py-4 m-auto w-2/3 justify-between items-start">
        <SearchSideBar locations={locations} cuisines={cuisines} searchParams={searchParams}/>
        <div className="w-5/6 ml-10">
          { restaurants && restaurants.length ? 
          restaurants.map((restaurant)=>{
            return (
              <SearchRestaurantCard restaurant={restaurant} key={restaurant.id}/>
            )
          })
          :
          <p>죄송합니다. 검색 결과를 찾을 수 없습니다</p>
          }
        </div>
      </div>
    </>
  );
}
